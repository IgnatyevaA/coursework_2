from src.api import HeadHunterAPI
from src.savers import JSONSaver
from src.vacancy import Vacancy

def filter_vacancies_by_keyword(vacancies: list[Vacancy], keyword: str) -> list[Vacancy]:
    return [v for v in vacancies if keyword.lower() in str(v).lower()]

def filter_vacancies_by_salary(vacancies: list[Vacancy], min_salary: int) -> list[Vacancy]:
    return [v for v in vacancies if v.to_dict()["salary_from"] >= min_salary]

def sort_vacancies_by_salary(vacancies: list[Vacancy]) -> list[Vacancy]:
    return sorted(vacancies, reverse=True)

def main():
    api = HeadHunterAPI()
    saver = JSONSaver()

    query = input("üîé –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π: ")
    per_page = int(input("üìÑ –°–∫–æ–ª—å–∫–æ –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–≥—Ä—É–∑–∏—Ç—å? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10): "))
    min_salary = int(input("üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: "))
    top_n = int(input("üèÜ –°–∫–æ–ª—å–∫–æ —Ç–æ–ø-–≤–∞–∫–∞–Ω—Å–∏–π –ø–æ–∫–∞–∑–∞—Ç—å?: "))

    vacancies = api.get_vacancies(query, per_page)
    saver.save_vacancies(vacancies)

    filtered = filter_vacancies_by_salary(vacancies, min_salary)
    sorted_vacancies = sort_vacancies_by_salary(filtered)

    for vacancy in sorted_vacancies[:top_n]:
        print(vacancy)

if __name__ == "__main__":
    main()
